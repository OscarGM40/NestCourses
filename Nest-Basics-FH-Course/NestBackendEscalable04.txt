			SECCION 14 DOCUMENTACION - OpenAPI

Veremos como documentar con Swagger,mediante una lib.También veré brevemente como documentar con Postman de forma rápida.

El objetivo de esta sección es trabajar con la documentación semi-automática que nos ofrece Nest para seguir  la especificación de OpenAPI
Puntualmente veremos:

1- Postman documentation

2- Nest Swagger

				VIDEO 192 DOCUMENTAR MEDIANTE POSTMAN

Para documentar puedo darle en los tres puntos en una request y darle a exportar.Veré una documentación que genera Postman,aunque no es demasiado precisa.
Además,lo que ofrece es publicar un endpoint o controller,pero no le da seguimiento.Si cambiara algo tengo que volver a exportar/desplegarlo de nuevo.

Sin embargo Nest ya ofrece esta feature de documentar el controller(y además le da seguimiento).Obviamente es mejor opción esta forma.
Para esto hay que ir al main.ts y configurar todo esto.

			VIDEO 193 NESTJS SWAGGER - OpenAPI SPECIFICATION

Doc: https://docs.nestjs.com/openapi/introduction

NOTA: La especificación OpenAPI es una definición de formato usado agnóstica al lenguaje para describir APIs RESTful.Nest provee un módulo dedicado que permite generar dicha documentación mediante decoradores.

Lo primero sería instalar este módulo(se llama SwaggerModule):

>npm install --save @nestjs/swagger

Despues solo hay que configurarlo en el main.ts:

import { NestFactory } from '@nestjs/core';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  const config = new DocumentBuilder()
    .setTitle('Cats example')
    .setDescription('The cats API description')
    .setVersion('1.0')
    .addTag('cats')
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document);

  await app.listen(3000);
}
bootstrap();

Fijate que al final no usamos addTag aqui,pues sería la misma tag para todos,tagearemos desde la clase.Fijate tmb que lo sirve en setup('api'),es decir en /api,al cual puedo ir ya(o cambiarlo si quisiera).Para arrancar necesito llamar al setup,claro.

Realmente puedo ver que falta mucha info(de ahí lo de semiautomático).Hay que ir a cada controller y darle más info mediante decoradores.
NOTA: OpenAPI es agnostico al lenguaje y framework.Puedo documentar una API en Java,en Next o Nest,express,etc

				VIDEO 194 Tags, ApiProperty y ApiResponse

Recuerda que los tags no son más que simples agrupadores(un nombre para el grupo).
NOTA: fijate que ahora mismo están todos los controladores bajo la tag 'default'.Obviamente debo agruparlos en grupos con un nombre coherente.

Empiezo por los products.Necesitaré el decorador @ApiTags(tag:string) de @nest/swagger:
@ApiTags('Products')
@Controller('products')
export class ProductsController {

Continuo con @ApiTags('Auth') y el resto.Pero todavia nos queda el asunto de los statusCode y el tipo de Response de cada Controller.

Para los statusCode tengo que ir por cada controlador con el decorador @ApiResponse(options:{}) que lleva un objeto de opciones configurables:

  @ApiResponse({ status: 201, description: 'Product was created', type: Product })
  @ApiResponse({ status: 400, description: 'Bad request' })
  @ApiResponse({ status: 403, description: 'Forbidden. Token related' })
  create(@Body() createProductDto: CreateProductDto, @GetUser() user: User) {
    return this.productsService.create(createProductDto, user);
  }

Por ejemplo puedo documentar el 201,el 400 y el 403.Sin embargo no vale sólo con el type,pues también tengo que anotar cada una de las propiedades de ese type en la entidad,usando el decorador @ApiProperty():


  @ApiProperty()
  @Column('text', { array: true, })
  sizes: string[];
  
  @ApiProperty()
  @Column({ type: 'text' })
  gender: string;
  
  @ApiProperty()
  @Column({ type: 'text', array:true, default: [] })
  tags: string[]; @ApiProperty()
  @Column('text', { array: true, })
  sizes: string[];
  
  @ApiProperty()
  @Column({ type: 'text' })
  gender: string;
  
  @ApiProperty()
  @Column({ type: 'text', array:true, default: [] })
  tags: string[];

Puedo ver que esto dará un tipado inicial a la response.Sin embargo,debo expandir esta documentación pues el id no es un string,sino un uuid,etc:

{
  "id": "string",
  "title": "string",
  "price": 0,
  "description": "string",
  "slug": "string",
  "stock": 0,
  "sizes": [
    "string"
  ],
  "gender": "string",
  "tags": [
    "string"
  ],
  "images": [
    "string"
  ]
}

Usaremos el decorador expandiendo su argumento que es un objeto de opciones.

		VIDEO 195 EXPANDIENDO EL DECORADOR APIPROPERTY

Realmente es ir por cada propiedad de la entidad y darle un ejemplo,descripcion,si es nullable,única,etc

  @ApiProperty({
    example:'t-shirt_testlo',
    description: 'Product SLUG -for SEO improvement',
    uniqueItems: true,
  })
  @Column({ type: 'text', unique: true })
  slug: string;

  @ApiProperty({
    example: 10,
    description: 'Product units remaining stock',
    default:0
  })
  @Column('int', { default: 0 })
  stock: number;

En la siguiente clase veremos como hacer algo parecido con los DTO,con rutas que admiten queryParams.

				VIDEO 196 DOCUMENTAR DTOS	

Documentar DTOs es algo fundamental,ya que son el core de todo.Si el backend necesita un body de una forma concreta debe estar documentado:

  @ApiProperty({default:10,description:'How many rows do you need',required:false})
  @IsInt() @IsPositive() @IsOptional() @Type( () => Number)
  limit?: number;

 @ApiProperty({default:0,description:'How many rows do want to skip',required:false}) 
  @Min(0) @IsOptional() @Type( () => Number)
  offset?: number;

Hago lo mismo con el CreateProductDto:
  @ApiProperty({
    description: 'Product title',
    uniqueItems:true,
    nullable:false,
    minLength:1
  })
  @IsString()
  @MinLength(3, { message: 'title must have at least 3 ch' })
  title: string;

  @ApiProperty()
  @IsNumber()
  @IsPositive()
  price: number;

Fijate que abajo tengo la opción de Schemas,los cuales debo tipar.Obviamente esto es algo muy muy básico.

IMPORANTE: si me traigo la clase PartialType de Swagger se pasará automáticamente el tipado desde la superclase a la subclase,algo que quiero hacer en UpdateProductDto:

// import { PartialType } from '@nestjs/mapped-types';
import { PartialType } from '@nestjs/swagger';
import { CreateProductDto } from './create-product.dto';

export class UpdateProductDto extends PartialType(CreateProductDto) {}

Para ella basta cambiar la clase que no sea la de mapped-types sino la de swagger y pasarán los decoradores(importante).

NOTA: recuerda que tengo un enlace a la documentación a OpenAPI(para Swagger)

@ApiBody({ type: [CreateUserDto] }) <- cuando sea un array de objetos
@ApiProperty({ enum: ['Admin', 'Moderator', 'User']}) <- para enums


					SECCION 15 WEBSOCKETS

Vamos a usar SocketIO para comunicacion en tiempo real en Nest.Nest ya viene con una libreria nativa para RTC.

Esta sección tiene información sobre la comunicación entre cliente y servidor mediante WebSockets, puntualmente veremos:

1- Nest Gateways
2- Conexiones
3- Desconexiones
4- Emitir y escuchar mensajes desde el servidor y cliente
5- Cliente con Vite y TS
6- Autenticar conexión mediante JWTs
7- Usar mismo mecanismos de autenticación previamente creado
8- Desconectar sockets manualmente
9- Prevenir doble conexión de usuarios autenticados.

Fijate que los Nest Gateways son muy importantes.

				VIDEO 202-203 WEBSOCKETS GATEWAYS

Vamos a implementar WebSockets en nuestro Teslo-Shop.Fijate que en este punto tengo que habilitar las CORS en el servidor para que el front pueda comunicarse.
Esto se debe hacer siempre que el front esté en un hosting/host diferente(fijate que un back en localhost:8000 y un front en localhost:8001 son dos host diferentes y entraria el CORS)
Para habilitar el Cors se usa:

const app = await NestFactory.create(AppModule);
app.enableCors(options) <- o simplemente app.enableCors() si no voy a pasar opciones lo cual obviamente no es nada recomendable abrir a todos

Para la parte de los WebSockets tengo un decorador ya:
@WebSocketGateway({cors:true});

Recuerda que sólo si tengo el front en la carpeta public del back(lo cual es bien extrañ) es que no tengo que abrir los CORS.Usualmente el front no suele estar embebida en el back por motivos obvios.

NOTA: la comunicación de WebSockets es una comunicacion activo-activo,es decir que el back tmb puedo comunicar

En Nest, un gateway es simplemente una clase anotada con el decorador ya mencionado @WebSocketGateway().

HINT: hay dos plataformas muy comunes en RTC que son SocketIO y WS(WebSocket).Al usar el decorador puedo elegir entre cualquier implementación,ya que se pone por encima.en resumen un Gateway lo usaré como un controlador.

Ahora ya si,creemos un nuevo recurso con nestcli:
>nest g res messageWs --no-spec (y eligo WebSocket)

NOTA: en este punto veré que necesito instalar dos librerias(la core y esta):
import { WebSocketGateway } from '@nestjs/websockets'; <- son dos,ojo
import { MessageWsService } from './message-ws.service';

@WebSocketGateway()
export class MessageWsGateway {
  constructor(private readonly messageWsService: MessageWsService) {}
}

Asi pues instalo la core y la impl:
>npm i @nestjs/websockets @nestjs/platform-socket.io

Y por último recuerda que debo abrir los cors y lo puedo hacer desde el decorador:

@WebSocketGateway({cors:true}) <- añadir cors a true
export class MessageWsGateway {
  constructor(private readonly messageWsService: MessageWsService) {}
}
HINT: en este punto puedo hacer un GET a la libreria apuntando a =>
{{LOCALHOST-3000}}/socket.io/socket.io.js y deberia darme el javascript

		VIDEO 204 ESCUCHAR CONEXIONES/DESCONEXIONES DESDE EL SERVER

Debe quedar bien claro ya que el server es la app de Nest y el cliente una aplicción web o una móvil que se conecta a este servidor.
También debe quedar claro que simplemente vamos a ver la implementación de WebSockets sobre Nest y que debo tener claro sus fundamentos que son agnósticos al fwk.

Con esto en mente puedo ver que el namespace es un nombre para un canal concreto al que conectarse:
@WebSocketGateway({cors:true, namespace: 'sala01'}) <- este controlador solo valdria para ese canal.Debo tener bien claro el concepto de namespace 

IMPORTANTE: para poder saber el Id del cliente tanto al conectarse como al desconectarse tengo que implementar dos interfaces,OnGatewayConnection y OnGatewayDisconnect.Obviamente tengo que desarrollar sus métodos abstractos:

@WebSocketGateway({ cors: true })
export class MessageWsGateway
  implements OnGatewayConnection, OnGatewayDisconnect
{
  constructor(private readonly messageWsService: MessageWsService) {}
  handleConnection(client: any, ...args: any[]) {
    throw new Error('Method not implemented.');
  }
  handleDisconnect(client: any) {
    throw new Error('Method not implemented.');
  }
}

HINT: en este punto FH recomienda instalar socket.io para quitar ese any del argumento client de ambos métodos abstractos:

>yarn add socket.io

import { Socket } from 'socket.io';
import { MessageWsService } from './message-ws.service';

@WebSocketGateway({ cors: true })
export class MessageWsGateway
  implements OnGatewayConnection, OnGatewayDisconnect
{
  constructor(private readonly messageWsService: MessageWsService) {}
  
  handleConnection(client: Socket, ...args: any[]) {
    console.log('Cliente conectado',client.id);
  }
  handleDisconnect(client: Socket) {
    console.log('Cliente desconectado',client.id);
}
}

En este punto tenemos que crear un front que se conecte,claro.

			VIDEO 205 CLIENTE - APP CON VITE Y VANILLA TS

Creamos una app con yarn create vite de simplemente TS.IMPORTANTE,hay que instalar en el cliente la impl de socket pero para el cliente:
>yarn add socket.io-client

HINT: en este punto recuerda que debo comprobar que ambas librerias,tanto la impl del back como la del front puedan trabajar juntas(misma versión,etc)
 
Tras instalar todo apunto a la URL y creo el socket del cliente,algo realmente sencillo:

import { Manager } from "socket.io-client";

export const connectToServer = () => {
  
  // me conecto a la URL que me ofrecieron
  const manager = new Manager("http://localhost:3000/socket.io/socket.io.js");
  // nos conectamos al namespace '/' que es el por defecto y guardo la conexión
  const socket = manager.socket("/");
  
};
* Recuerda que todos los clientes se conectan al servidor en una relacion n a 1 y es el servidor el que despues responde.
Ahora ya si,tengo el back y front enlazado por el socket server:

[Nest] 694296  - 03/11/2022, 19:36:47     LOG [Bootstrap] Nest running on port 3000
Cliente conectado con id T7rxehjkb7Q62Tp5AAAB
Cliente desconectado con id T7rxehjkb7Q62Tp5AAAB
Cliente conectado con id PmE3jUG-e9hSw30xAAAD
Cliente desconectado con id PmE3jUG-e9hSw30xAAAD
Cliente conectado con id _3UghB7nlB-l_zAKAAAF

Fijate que en el back fueron un par de librerias,el decorador e implementar dos interfaces y desarrollar sus métodos abstractos mientras que en el front aun es más sencillo,con sólo las librerias y un método.Obviamente,esto será mucho más complejo en algo real.

		VIDEO 206 RESCATAR LOS IDS EN EL SERVER

Obviamente el primer paso es mantener identificado a cada cliente de forma precisa,lo cual podemos hacer con el id único que estamos recibiendo,claro

Lo primero será crear la interface,despues es solo agregar una nueva entrada:

interface ConnectedClients {
  [id: string]: Socket;
}

@Injectable()
export class MessageWsService {

  private connectedClients: ConnectedClients = {};

  registerClient(client: Socket) {
    this.connectedClients[client.id] = client;
  }

  removeClient(clientId: string) {
    delete this.connectedClients[clientId];
  }

  getConnectedClients():number {
  return Object.keys(this.connectedClients).length    
  }
  
}
Fijate en el uso de [id:string]: Socket.Esto es muy interesante y casi nunca lo uso,debo pensar más en ello

		VIDEO 207 DETECTAR CONEXION Y DESCONEXION EN EL CLIENTE

Lo siguiente sería hacer lo mismo pero en el cliente,para de esta forma ya poder empezar a mostrar algo gráficamente en base a si está conectado o desconectado un cliente.

Para esto ya tenemos los eventos 'connect' y 'disconnect' propios de la libreria:


const addListeners = (socket: Socket) => {
  const serverStatusLabel = document.querySelector('#server-status')!;
  // on para escuchar al server,emit para emitir al server
  socket.on('connect', () => {
    serverStatusLabel.innerHTML = 'connected'
  })
  
  socket.on('disconnect', () => {
    serverStatusLabel.innerHTML = 'disconnected'
  })
  
}

Lo siguiente es identificar a los clientes,para ello el server tiene que emitir a cada cliente si se conectó otro(para ello mandaremos todos los ids).Fijate que para esto ya me dan un decorador donde almacenar la instancia de  WebSocketServer:

import {
  OnGatewayConnection,
  OnGatewayDisconnect,
  WebSocketGateway,
  WebSocketServer,
} from '@nestjs/websockets';

export class xxx implements xxx,xxx {
  @WebSocketServer() wss: Server; <- propiedad de clase

    // en el server wss.emit('eventName',payload) emite a todos
    this.wss.emit('clients-updated',this.messageWsService.getConnectedClients())

Fijate que el decorador va a nivel de propiedad

		VIDEO 209 EMITIENDO DESDE EL CLIENTE Y ESCUCHANDO DESDE EL SERVER

Hagamos algo más interesante como que el usuario emita el texto de un input hacia un usuario en particular.
Habrá que usar un form y un input y rescatarlos del DOM:

  messageForm.addEventListener("submit", (event) => {
    event?.preventDefault();
    if (messageInput.value.trim().length <= 0) return;

    socket.emit("message-from-client", {
      id: "yo!",
      message: messageInput.value,
    });
  });

Obviamente falta la parte del server.Es aqui donde entra un decorador nuevo en Nest para suscribirse a un evento mandado desde el client,y es @SubscribeMessage

  @SubscribeMessage('message-from-client')
  handleMessageFromClient(client: Socket, payload: NewMessageDto) {
    console.log(client.id,payload)
  }

* Fijate que éste es un decorador de método

			VIDEO 210 MÁS FORMAS DE EMITIR DESDE EL SERVIDOR

En este punto,en el que tengo a los clientes identificados y unidos al socket server y recibiendo el mensaje del cliente tengo que decidir si usaré salas o a quien voy a devolver ese mensaje.Normalmente lo devolveré a alguién en concreto.

1- Puedo unir un cliente a una sala con client.join('sala 1').FH suele usar el id del cliente o el email como string identificador de la sala

2- Puedo emitir al cliente solo,a todos menos al cliente,a todos incluyendo el cliente inicial o a un cliente en concreto:
  this.wss.emit() <- emite a todos
  this.wss.to('room') <- emite a una sala solo
  client.emit() <- emite solo al mismo cliente
  client.broadcast.emit() <- emite a todos menos al cliente inicial

Con todo esto en mente mandamos al resto el mensaje,no es importante ahora:
 @SubscribeMessage('message-from-client')
  onMessageFromClient(client: Socket, payload: NewMessageDto) {
     client.broadcast.emit('message-from-server',{
      fullName: 'Soy yo',
      message: payload.message || 'no-message!!'
    }) 
  }

Y el cliente agrega un simple <li>:
  socket.on("message-from-server", (payload: { fullName: string; message: string }) => {
    const newMessage = `
      <li>
        <strong>${payload.fullName}</strong
        <span>${payload.message}</span>
      </li>`;
    const li = document.createElement("li");
    li.innerHTML = newMessage;
    messagesUl.appendChild(li);
  });

			VIDEO 211 PREPARAR CLIENTE PARA RECIBIR EL JWT

Vamos a hacer de nuevo algo muy básico,con un input y un botón:
* En el Html
    <input id="jwt-token" placeholder="Json Web Token" />
    <button id="btn-connect">Connect</button>
    <br />

Rescato el DOM
const jwtToken = document.querySelector<HTMLInputElement>('#jwt-token')!;
const btnConnect = document.querySelector<HTMLButtonElement>('#btn-connect')!;

* Y mando el token(que será un simple string) al método
btnConnect.addEventListener('click',() => {
  if(jwtToken.value.trim().length <= 0) return alert('Enter a valid JWT')
   connectToServer(jwtToken.value);
})

* Con ese string puedo mandarlo en un header extra,por ejemplo
export const connectToServer = (jwtToken: string) => {
  // me conecto a la URL que me ofrecieron en la doc
  const manager = new Manager("http://localhost:3000/socket.io/socket.io.js",{
    extraHeaders:{ authentication: jwtToken }
  });

Y obviamente lo tengo en el server desde el primer momento:
  handleConnection(client: Socket, ...args: any[]) {
    // recuerda que el header extra estará en handshake.headers.xxx
    const token = client.handshake.headers.authentication as string;
   console.log(token)

Si mando algo en el input para el token lo debería ver como header y asi es.Aun falta hacer algo con esto,como comprobar que sea realmente un JWT o extraerle el payload(recuerda que tenemos dos usuarios en PostgreSQL

			VIDEO 212 VALIDAR JWT DEL HANDSHAKE 

TIP: handshake es apretón de manos en inglés.Se llama asi como simil a lo que hacen front y back al comunicarse.
Bien,dado que vamos a verificar el token lo primero es inyectar el servicio desde @nestjs/jwt:

@WebSocketGateway({cors:true})
export class MessageWsGateway implements OnGatewayConnection,OnGatewayDisconnect{ 
  @WebSocketServer wss:Server;

  constructor(
    private readonly messageWsService: MessageWsService, <- servicio interno
    private readonly jwtService: JwtService

Esto dará un error,ya que no hemos declarado el servicio en el módulo en los providers.Sin embargo,dado que vamos a necesitar más cosas que sólo el servicio es mejor importar el módulo AuthModule(esta vez en el array de imports):

@Module({
  providers: [MessageWsGateway, MessageWsService],
  imports: [AuthModule]
})
export class MessageWsModule {}

* Fijate que en este módulo tenemos el ORM tmb,los DTOs.

IMPORTANTE: dado que no estoy en un controlador no puedo usar las excepciones buit-in anteriores como HttpException,sin embargo,si que tengo anotada la clase con el decorador  @WebSocketGateway y estoy en la ExceptionZone,solo que tengo que lanzar otras clases:

  throw new WsException('Invalid credentials');

HINT: Esta clase WsException viene de la lib @nestjs/websockets

Sin embargo,a Fernando no le gusta mucho como maneja esta clase los errores asi que lo haremos manualmente.

  handleConnection(client: Socket, ...args: any[]) {
    const token = client.handshake.headers.authentication as string;
    let payload: JwtPayload;

    try {
      payload = this.jwtService.verify(token);
    } catch (error) {
      return client.disconnect();
    }

    console.log({ payload });

Recuerda que saco el payload con verify,y que sólo guardamos el id(lo puedo ver en JwtPayload)
Si voy a Postman puedo coger el jwt y ver en consola el id del usuario,con el que ya puedo crear salas:

{
  payload: {
    id: 'f7db731c-ce72-45f9-9519-9ded30e917a9',
    iat: 1667641057,
    exp: 1667648257
  }
}

También podemos acceder al nombre del usuario y mostrarlo en cada mensaje

		VIDEO 213 ENLAZAR SOCKET CON NOMBRE E ID DEL USUARIO

Ya que tenemos el id tras sacarlo del payload del token lo mandamos al registerClient inicial:
 this.messageWsService.registerClient(client,payload.id);

import { InjectRepository } from '@nestjs/typeorm';
import { Socket } from 'socket.io';
import { User } from 'src/auth/entities/user.entity';
import { Repository } from 'typeorm';

interface ConnectedClients { [id: string]: Socket; }

@Injectable()
export class MessageWsService {
  private connectedClients: ConnectedClients = {};

  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
  ) {}

recuerda que el servicio iba anotado con @InjectRepository(Model)

Bien,con todo esto vamos a cambiar la data almacenada por esto:

interface ConnectedClients {
  [id: string]: {
    socket: Socket;
    user: User;
  };
}

Y en el register lo llenamos:
  async registerClient(client: Socket, userId: string) {
    const user = await this.userRepository.findOneBy({ id: userId });
    if (!user) throw new Error('User not found');
    if (!user.isActive) throw new Error('User not active');

    this.connectedClients[client.id] = {
      socket: client,
      user: user,
    };
  }

También creamos un getter para el fullName por socketId:
  
getUserFullNameBySocketId(socketId: string): string {
    return this.connectedClients[socketId].user.fullName;
  }

          VIDEO 214 DESCONECTAR USUARIOS DUPLICADOS

No vamos a permitir que ningun usuario bajo ninguna circunstancia tenga dos instancias del chat activas(aunque fijate que en la realidad pudiera ser que quiera tener una en el desktop y otra en el mobile)


Si bien esto es medianamente sencillo:

  private checkUserConnection(user:User){
    for (const clientId of Object.keys(this.connectedClients)) {
      const connectedClient = this.connectedClients[clientId];
      if (connectedClient.user.id === user.id){
        connectedClient.socket.disconnect();
        break;
      }
    }
  }
tenemos un problema en el front y es que al crear una nueva instancia de Manager no estamos limpiando los listeners que estamos creando y vemos 'disconnect'.
Afortunadamente la gente de SocketIO sabe que es muy fácil que se de este caso de crear y cerrar muchas conexiones en una app,y por ello crear un montón de listeners y nos provee de dos métodos(removeAllListener o removeLIstener(listener):

Sin embargo tenemos otro pequeño problema y es que necesito elevar el socket afuera del método para tenerlo ya antes de crearlo y si es asi(es decir,si no es undefinded que el removeAllListener apunte a él y limpie todo):

let socket: Socket;

export const connectToServer = (jwtToken: string) => {
  const manager = new Manager("http://localhost:3000/socket.io/socket.io.js",{
    extraHeaders:{
      authentication: jwtToken
    }
  });

  socket?.removeAllListeners();
  socket = manager.socket("/");

* fijate que let socket:Socket la variable socket es undefined hasta que la asigne,pero la segunda vez no lo será y por ello entra el socket?.removeAllListeners().Solución sencilla y pro.Recuerda que cualquier variable nace undefined si no la asigno.

			SECCION 16 DESPLIEGUE A PRODUCCIÓN DEL BACK Y EL FRONT 

Esta sección trabajaremos en desplegar todo el backend y frontend, pero puntualmente aprenderemos:

1- Heroku CLI
2- Logs y Tails de logs
3- Manejo de errores en producción
4- Configuración de variables de entorno
5- Postgres en la nube
6- Despliegue en Netlify
7- Pruebas de aplicación
8- CORS
9- Generar build de producción VITE
10- y mucho más

Espero que esta sección les guste mucho y nos vemos en el siguiente video!! :D

				VIDEO 219 DESPLIEGUE EN LA NUBE DE POSTGRES

Heroku tiene una implementación de PostGres gratuita(500MB) asi que podemos usar esa plataforma.
Para hacer esto hay que ir a la pestaña addons y dar en configure addons.Despues eligo Heroku-Postgres y eligo el plan Free(todo esto sobre una app backend).
Despues voy en settings y ver credentials.Alli se me dará la password,el host,la database el user,el port,etc.

			VIDEO 220 CONFIGURACIONES RESTANTES

En este momento hay que realizar unos pequeños cambios ya que la DB ya no es el contenedor,sino que está en Heroku,y espera una conexión certificada(SSL??).
Creamos una nueva env en el .env:

STAGE=dev
* Esta variable nos va a indicar en que ambiente estamos.Una vez creada vamos al auth.module y añadimos las propiedades ssl y extra:

    TypeOrmModule.forRoot({
      ssl: process.env.STAGE === 'prod',
      extra: {
        ssl:
          process.env.STAGE === 'prod' ? { rejectUnauthorized: false } : null,
      },
      type: 'postgres',
      host: process.env.DB_HOST,
      port: +process.env.DB_PORT,
      database: process.env.DB_NAME,
      username: process.env.DB_USERNAME,
      password: process.env.DB_PASSWORD,
      autoLoadEntities:true,

En el package.json el comando start lo cambio por el de producción pues hay que arrancar la app mediante node y no nest(recuerda que llamará al npm start):
 "start": "node dist/main", <- antes era "nest start"

También es bueno especificar a Heroku la versión de Node que queremos,esto lo hago con la propiedad engines:

  "license": "UNLICENSED",
  "engines": {
    "node": "18.x" <- cualquier 18
  },
  "scripts": {
    "prebuild": "rimraf dist",

				VIDEO 221 DESPLEGAR APLICACION EN HEROKU

Haremos el deployment mediante CLI.Lo primero es logearse con el comando(recuerda que abre un browser simplemente):
>heroku login

Despues preparo el repo que quiero subir con el commit y push y:
>heroku git:remote -a teslo-nest <- donde <teslo-nest> es el nombre de la app

Esto setea el remoto simplemente(es como git remote add,de ahi viene el -a).Es decir,que podría hacer el commit y todo esto despues.

Una vez tengo todo,añadido el remoto para heroku,creado una DB en addons miro en que rama estoy y hago el push:
>git push heroku <rama> (por ejemplo git push heroku main)

*Aqui podria haber algun fallo,aunque no debería.Fijate que no hemos configurado las variables de entorno aún en la app,va a fallar la app.Puedo verlo con :
>heroku logs --tail

Veré obviamente el Unable to connect to the database.Eventualmente crasheará.


IMPORTANTE: para configurar las variables de entorno es en settings y config vars.Alli agrego todas las necesarias,obviamente cambiando los valores por los de la DB agregada como add-on.

				VIDEO 223 DESPLEGAR FRONTEND

Vamos a desplegar el front en otro hosting(netlify) y asi ver los problemas de cors.
Fijate que en el new Manager(url) habria que dejar de apuntar a local y apuntar al backend,que estaría en xxx.heroku.com.app o lo que sea).Vamos a netlify despues y subimos una app dejandola caer en el dropbox que lo hace solo.

			FIN DE CURSO

FH recalca que es posible ver como downside todo el montón de instalaciones y dependencias que hay que instalar según vamos desarrollando una app de nest(lo mismo puede pensarse de React).
Sin embargo esto está echo asi para que tengamos aplicaciones más pequeñas,más fáciles de desplegar y de mantener y además cuando instalamos algo sabemos porqué lo necesitamos y porqué lo instalamos


