      SECCION 01 INTRODUCCION AL CURSO

Las instalaciones recomendadas para este curso son:
VS Code
Postman
Git
Node
Las imagenes de Postgres:14.3 y Mongo:5.0.0

      SECCION 02 REFORZAMIENTO DE NEST

Esta sección tiene por objetivo ser un reforzamiento y una auto-evaluación para determinar si necesitas un mayor reforzamiento.

Idealmente todos los conceptos que usaré a continuación deben de ser familiares para ti, módulos, controlador, servicios, DTOs, etc.

Si no es así, y sientes que todo es nuevo y complicado, te recomiendo que no continues con el curso y realiza mi primer curso de Nest, para tener la base que necesitas para entrar en este curso.

      VIDEO 08 CREACION DE UN PROYECTO CON NEST

Lo primero será instalar la cli:
>npm i -g @nestjs/cli
Despues podemos crear un nuevo proyecto con:
>nest new project-name
NOTA: puedo ver el linter como una serie de reglas que queremos que todos los desarrolladores en nuestro proyecto sigan.Si veo que da mucha guerra puedo desinstalar todas las librerias asociadas a él.
>yarn remove prettier eslint-config-prettier eslint-plugin prettier

            VIDEO 09 CRUD COMPLETO

Como pequeño recordatorio tengo el pdf:
>nest g cl <path/nombre>   <- genera una clase
>nest g co <path/nombre>   <- generar un controlador
>nest g d <path/nombre>    <- genera un decorador
>nest g gu <path/nombre>    <- genera un guard
>nest g in <path/nombre>    <- genera un interceptor
>nest g mo <path/nombre>    <- genera un modulo
>nest g pi <path/nombre>    <- genera un pipe
>nest g s <path/nombre>    <- genera un servicio
>nest g res <path/nombre>    <- genera un recurso completo

Fijate que tenian la opcion de crear un crud completo con nest g res <name>
Fijate que este comando crea un controlador,un servicio, dos dtos,un modulo,una entidad,actualizó el modulo exterior en el que cree el recurso con el import,etc.Amazing

Un controlador en una REST API es quien escucha las solicitudes y emite respuestas.
Un servicio usualmente están destinados a manejar la lógica de negocio de la aplicación.
Un módulo basicamente es un simple agrupador de archivos.
NOTA: recuerda que debo inyectar la instancia de los servicios en los controladores,y que Nest usará singletons

El decorador @Param('id') rescata el segmento dinámico por ese name:
@Get(':id') <- esto será /api/todo/3 por ejemplo
findOne(@Param('id') id:string){
      return this.todoService.findOne(+id)
}
Un Patch usará @Param y @Body por motivos obvios.Fijate que los controladores deben ser llamados,son funciones
@Patch(':id')
update(@Param('id') id:string, @Body() updateTodoDto: UpdateTodoDto){
      ...
}

Dto significa Data Transfer Object.Estos objetos son utilizados para asegurarse que la informacion luce y  es transladada de un lugar a otro(normalmente entre server y front) con un formato correcto.Son como contratos entre back y front.

Por último una Entity es una representación de como luce una entrada en la base de datos(registro si es relacional,documento si es no-relacional)

            VIDEO 10 SELECCIONAR TODOS LOS ITEMS(TODOS)

Recuerda que en Nest los Pipes me ayudan a transformar la información.Dado que todos los Params son strings y lo queremos como numero parece que lo mejor es usar un Pipe:

import { ParseIntPipe } from "@nestjs/common"

@Get('id')
findOne(@Param('id',ParseIntPipe) id: number){
      return this.todoService.findOne(id)
}
Esto es mucho mejor que lo que habia con el simple +id ya que si el Pipe falla al parsear ese segmento Nest va a capturar esa excepcion y a realizar lo que yo le diga(a diferencia del operador unario que es javascript puro).Desde luego es muy razonable usar este Pipe,asinto

TIP: recuerda que este fmk destaca por su manejo de errores entre otras cosas,asi que si no encontraramos un recurso puedo lanzar sus custom Exceptions(en este caso lanzar un NotFoundException ya tira un 404):
 
  findOne(id: number) {
    const todo = this.todos.find((todo) => todo.id === id);
    if (!todo) throw new NotFoundException(`TODO con id ${id} no encontrado`);
    return todo;
  }

Seria buena idea migrar hacia Nest,asinto.

            VIDEO 11 CREAR UN TODO

Recuerda que Nest no tiene validacion en los DTOs por arte de magia.Lo tengo en el PDF,estas dos librerias cumplen de momento:

>yarn add class-validator class-transformer

Algunos decoradores que expone la libreria class-validator son isOptional,isArray,isPositive,isUUID,isDateString  

Tras instalar las librerias hay que configurar la app(en Nest en principio es en el main.ts)

  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  );

Puedo ver perfectamente que es un Pipe Global de validacion(basicamente es activarlas).To forbid=prohibir

{
    "statusCode": 400,
    "message": [
        "property nombre should not exist"
    ],
    "error": "Bad Request"
}

Ahora ya con las validaciones interpretandolas el framework puedo usarlas donde necesite.Desde luego esto es primordial en una API.

export class CreateTodoDto {
  // que sea un string(con lo que no me pueden mandar numeros o objetos,interesante) y que no sea un string vacio
  @IsString()
  @IsNotEmpty()
  description: string;
}

    VIDEO 12-13 UPDATE AND DELETE A TODO

Simplemente crear la lógica para ambos controladores con el arreglo existente como mockData:

remove(id: number) {
  const todos = this.todos.filter((todo) => todo.id !== id);
  return todos;
}
NOTA:recuerda que puedo abrir un componente JSX(y por ende un ReactNode y agregarle más props: (props) => <Component {...props} day={day}) siempre que tenga una property que pide un JSX de retorno(fijate que pedia un ReactNode la propiedad cellRenderer,mira mañana si pedia un JSX o un () => JSX)

      SECCION 03 INTRO NEST + GRAPHQL

Recuerda que el objetivo principal de un backend en GraphQL es darle todo el poder al desarrollador de front para que el mismo se autosirva los datos con sus propios endpoints personalizados.
Esto ayuda muchisimo al desarrollador de backend en el mantenimiento de ese backend.
Usaremos apollo-studio

Esta es nuestra primera sección de GraphQL, en la cual tendremos una introducción a la tecnología y empezaremos con ciertos conceptos.
Puntualmente veremos:

1- GraphQL Playground
2- Apollo Studio
3- Diferentes GUIs para usar GraphQL
4- Resolvers
5- Args
6- Queries
7- Instalaciones en Nest

Básicamente esto dejará las bases para poder seguir configurando y usando GraphQL en Nest, posteriormente estas configuraciones las haremos mucho más rápido, pero al inicio, quiero hacer todo paso a paso para comprender qué y el por qué de las mismas.

      VIDEO 18 INTRODUCCION A GRAPHQL  CON NEST

Docu de Graphql: https://graphql.org
Docu de Nest con graphql: https://docs.nestjs.com/graphql

GraphQL es un lenguaje para leer y mutar data mediante APIs(es una forma de hacer queries a una API).Es totalmente agnóstico al lenguaje,con lo que la sintaxis dará igual si estoy en Go o PhP(sólo la sintaxis de GraphQL claro).

type Astronaut { <- siempre se usa 'type' para declarar un tipo ??
  id: ID!
  callsign: String!
  age: Number
  rocket: [Rocket]
}

Recuerda que en GraphQL el que pide la petición tmb especifica qué es lo que quiere de regreso,no como en REST que el endpoint devuelve siempre el mismo objeto,devolviendo muchas veces de más
Usualmente en GraphQL solo se tiene un endpoint(pueden ser más,e inclusive se pueden mezclar con servicios REST y tener un backend híbrido).

NOTA: hay dos formas de que Nest y Graphql trabajen juntos:

1- Schema First: cuando usamos esta forma nosotros vamos a definir schema con SDL(Schema Definition Language, o GraphQL Definition Language,es decir GDL).Es muy útil si se tienen conocimientos previos.Basicamente es generar el Schema y atraves de funciones de Nest éstas generarán el código de los modulos,los resolvers(muy interesante pues)

2- Code First: la otra forma es crear las clases y definiciones en TS mediante decoradores y esto nos va a generar el Schema por nosotros.Por ejemplo:

@Query(() => String)
hello() {
  return 'Hello world';
}

@Query(() => [Cat],{name:'cats'})
async cats() {
  return this.catsService.findAll();
}
Y esto generaria resolvers,schemas,etc.Es decir,que usando codigo de Typescript generaremos codigo GQL,al reves de la primera forma que es al reves.Entiendo que veremos ambas formas

IMPORTANTE: todo endpoint /graphql tiene el tipo Query y Mutation ya definidos.Mediante el primero podemos hacer GETS de data y con el segundo el resto.
 NOTA: GraphQL permite realizar multiples Queries(y subqueries) de forma simultánea,siendo para el cliente una única peticion/transacción(de nuevo muy interesante esto).

 GraphQL también permite integrar seguridad con Tokens de acceso,no pudiendo realizar una petición sin ese token.

      VIDEO 19 CREAR UN PROYECTO CON NEST Y GRAPHQL

Primero hay que crear un proyecto normal de nest con 'nest new project-name':
>nest new 02-todo

IMPORTANTE: tengo las librerias en el PDF,pero si cambiaran Fernando deja un enlace a la docu
Despues hay que instalar las librerias de graphql para nest,adapters,la lib core,etc usando yarn o npm:
>yarn add @nestjs/graphql @nestjs/apollo graphql @apollo/server
NOTA:fijate que son muy parecidas a usar un servidor de Express ya que estamos usando uno en el background.

Recuerda tmb desinstalar el prettier y todas las librerias que molestan tanto.
Bien,ahora faltaria hacer la configuracion en el app.module.ts.Aparte hay que crear un schema,no es suficiente con la configuracion:

import { ApolloDriver, ApolloDriverConfig } from '@nestjs/apollo';
import { Module } from '@nestjs/common';
import { GraphQLModule } from '@nestjs/graphql';

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver
    })
  ],
  controllers: [],
  providers: [],
})
export class AppModule {}

Si ahora levantamos el server dará error por falta del schema.gql(en realidad no daba este error,sino el de la consulta minima necesaria o entrypoint,que basicamente es que necesitamos un re):
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      autoSchemaFile: join(process.cwd(),'src/schema.gql')
    })

    VIDEO 21 PRIMER RESOLVER

Primero que nada vamos a generar un modulo:
>nest g mo helloWorld
Ahora generamos un resolver por cli:
>nest g r helloWorld --no-spec (g r de generate resolver)

NOTA: fijate que los resolvers van en el array de Providers del modulo.En una API REST serían como un controlador(sin embargo los controllers van en los imports y los services en los providers)
LOs resolvers proveen las instrucciones para transformar una operacion de GraphQL(una query,mutation o subscription) en data.Fijate que esta queries vendrán del cliente(puedo observar que por su naturaleza son como un controlador,pero técnicamente van en los providers)

NOTA: la mayoria de las definiciones en un schema de GraphQL son object types.Cada uno de estos objetos representa un objeto de dominio(domain types) con los que el cliente pueda necesitar interactuar.Por ejemplo un Author:
type Author {
  id: Int!
  firstName: String
  lastName: String
  posts: [Post!]!
}

Para poder crear esto con la approach 'code first' tenemos que usar una clase de forma muy parecida a crear una Entity.Fijate en el uso del decorador @ObjectType que especifica que es un Object Type para el schema y en el decorador @Field para cada property(investigar como se juntan,parece que usar code first implica no crear un schema.gql):
import { Field, Int, ObjectType } from '@nestjs/graphql';
import { Post } from './post';

@ObjectType()
export class Author {
  @Field(type => Int)
  id: number;

  @Field({ nullable: true })
  firstName?: string;

  @Field({ nullable: true })
  lastName?: string;

  @Field(type => [Post])
  posts: Post[];
}

De nuevo,recuerda que en los resolvers va funcionalidad,son como controladores.Asi pues podemos crear nuestra primera funcion(de momento una query):

import { Resolver, Query } from "@nestjs/graphql";

@Resolver()
export class HelloWorldResolver {
  @Query(() => String)
  helloWorld():string {
    return 'hello world'
  }
}
Fijate que podria ser async helloWorld(args) perfectamente.Fijate en que Query viene de la libreria @nestjs/graphql ya que hay otro  en @nestjs/common.
NOTA: lamentablemente hay que especificar al decorador @Query como luce la operacion graphql(@Query( () => String) ).En este caso son tipos de Graphql y no de Typescript 

IMPORTANTE: dado que estamos usando code first el schema.gql se creará sólo,en cuanto tenga algo,esta Query nos autogenerará el file
TIP:el file es autogenerado y sobreescrito en cada compilación,si escribo algo en él lo perderé en cuanto se regenere.

NOTA: ya puedo ir al playground(que esta en /graphql) y llamar a la Query:

query { <- la palabra query es opcional,pero no mutation o subscription
  helloWorld
}

Puedo renombrar la salida con dos puntos o realizar varias llamadas en una unica consulta(esto parece muy interesante):

query {
  hola:helloWorld
  hola2:helloWorld
}

NOTA: en la docu del playground veré que el retorno de la Query es de tipo scalar String.Hay varios escalares en GraphQL:
Int <- 32-bit int
Float <- numero con decimales(es un Double)
String <- secuencia de caracteres UTF-8
Boolean <- true o false
ID <- Representa un identificador único

Puedo ver que tienen el ID como scalar ya definido y que un scalar String siempre será UTF-8.
Adicionalmente podemos crear nuestros propios Scalar

IMPORTANTE: desde el playground puedo descargar el schema.gql y compartirlo con otros devs
NOTA: normalmente el playground se activa en desarrollo pero obviamente se desactiva en produccion ya que da acceso al server

    VIDEO 22 INSTALAR APOLLO STUDIO EN VEZ DEL PLAYGROUND

NOTA: Fernando deja en el PDF como instalar Apollo Studio pero Nest ya no trabaja con apollo-server-express o apollo-server-core sino que @apollo/server sustituira a estas dos:

import { ApolloServerPluginLandingPageLocalDefault } from '@apollo/server/plugin/landingPage/default';

Ojo,activar Apollo Studio requiere desactivar el playground.Fijate que lo de arriba va en los plugins y es un método que hay que llamar

@Module({
  imports: [
    GraphQLModule.forRoot<ApolloDriverConfig>({
      driver: ApolloDriver,
      playground: false, <- DESACTIVAR
      autoSchemaFile: join(process.cwd(), 'src/schema.gql'),
      plugins: [ApolloServerPluginLandingPageLocalDefault()],
    }),
    HelloWorldModule,
  ],

El endpoint seguira siendo el mismo (localhost:3000/graphql) pero es una IGU más avanzada

    VIDEO 23 GENERAR UNA NUEVA QUERY

Si no especifico el nombre de la Query en el decorador va a tomar el nombre de la funcion decorada.Seria interesante que no se llamara asi la Query:

 @Query(() => String)
  helloWorld(): string {
    return 'Hola mundo';
  }

Si quisiera cambiar esto simplemente abro el objeto de configuracion que viene como segundo argumento del decorador @Query:


@Resolver()
export class HelloWorldResolver {
  @Query(() => String, { description: 'retorna un literal', name: 'hello' })
  helloWorld(): string {
    return 'Hola mundo';
  }
}

Desde ahora la Query se llama 'hello',además de tener una pequeña description(Fijate que es aqui donde especifico que puede regresar un null).Si cambio este valor veré como cambia el retorno de scalar String! al scalar String.

import { Float } from "@nestjs/graphql";

  @Query(() => Float, {
    description: 'retorna un scalar Float entre 0 y 100',
    name: 'randomNumber',
    nullable: false,
  })
  getRandomNumber(): number {
    return +(Math.random() * 100).toFixed(2);
  }

Fijate que me tengo que importar el tipo de scalar.Recuerda que puedo realizar varias llamadas a la vez en GraphQL en una unica llamada:

query LaQueryDeAsinto {
  rnd1:randomNumber
  rnd2:randomNumber
  rnd3:randomNumber
}
La response será asi:
{
  "data": {
    "rnd1": 22.21,
    "rnd2": 23.25,
    "rnd3": 90.96
  }
}
Fijate que puedo sacar multicursores o duplicar lineas en apollo studio.

VIDEO 24 GENERAR UN RANDOM ENTRE CERO Y UN ARGUMENTO - PASAR ARGUMENTOS POR LA QUERY

En GraphQL ,cada campo y objeto anidado puede tener su propio set de argumentos,haciendo a graphQL superpoderoso.Incluso puedo pasar argumentos a campos escalares,para implementar transformaciones de datos en el server,en vez de en el cliente(de nuevo otro concepto interesante).Es decir,que puedo tipar los argumentos y esperar solo un determinado tipo

Bien,para poder pasar argumentos en la forma code first tengo que usar el decorador @Args(name:string) donde le daré el nombre del arg que quiero ver en el endpoint:

@Query(() => Int,{name:'randomNumberFromZeroTo})
getRandomNumberFromZeroTo(@Args('to',{type: () => Int}) to:number):number {
  return Math.floor(Math.random() * to)
}
Importante no confundir el to de @Args('to') que tendrá impacto en toda la app con el siguiente to que es una variable de scope local.También hay que indicar el tipo de argumento que será en GraphQL,de nuevo no confundir con el number de javascript

Por último podemos especificar un valor por defecto pero de nuevo tenemos que hacerlo tanto para JavaScript como para GraphQL(con un nullable vale pero tmb tenia un defaultValue que pisará al de JavaScript.Como no queremos eso con el nullable vale):

  getRandomNumberFromZeroTo(
    @Args('to', { type: () => Int, nullable: true }) to: number = 6,
  ): number {
    return Math.floor(Math.random() * to);
  }

NOTA: durante todo el curso vamos a usar el approach code first por ser un curso de iniciación,pero es más eficiente usar el approach de schema first y el schema.gql no autogenerado

      SECCION 04 CONTINUACION DEL TODO

En esta sección tendremos mucha información de cómo trabajar con GraphQL y Nest, puntualmente veremos:

1- Alias
2- Fragments
3- Queries
4- Mutations
5- Aggregations
6- Deprecated directive
7- Args
8- Inputs
9- Custom Types
10- Servicios
11- CRUD

Y nos dará una excelente idea de cómo realizar cosas más complejas el día de mañana.

      VIDEO 31 TODO RESOLVER Y CUSTOM OBJECT TYPES

Lo primero es generar un modulo.Fijate que la estructura queda bastante clara,colgando todos los modulos de src(nest g mo todos).

Despues creo un resolver en esta carpeta(fijate que el comando es nest g r todos porque le he llamado todos al modulo)

Para crear un scalar personalizado(nuestro Object type para un Todo) simplemente creamos una clase decorandola con @ObjectType:

import { Field, Int, ObjectType } from "@nestjs/graphql";

@ObjectType()
export class Todo {
  
  @Field(() => Int)
  id: number;
  
  @Field(() => String)
  description:string;
  
  @Field(() => Boolean)
  done:boolean=false;
}

NOTA: fijate que @Field luce igual que @Query,necesita una funcion que devuelva un tipo válido de GraphQL.
Fijate que String y Boolean son los constructores de Javascript,pero valen en este caso.Ahora ya si podemos crear en el resolver de este módulo nuestra primera @Query para que devuelva todos los Todos:

import { Query, Resolver } from '@nestjs/graphql';
import { Todo } from './entity/todo.entity';

@Resolver()
export class TodosResolver {
  @Query(() => [Todo], {
    name: 'todos',
    description: 'encuentra todos los Todos',
  })
  findAllTodos(): Todo[] {
    return [
      {
        id: 1,
        description: 'anything',
        done: false,
      },
    ];
  }

          VIDEO 32 SERVICES

Antes de nada fijate que en el Apollo Studio se organizan las Queries y Mutations alfabeticamente asi que la query anterior 'todos' estará bastante abajo.

IMPORTANTE: idealmente querremos que nuestro resolver se mantenga lo más simple posible.Es por ello que necesitariamos un servicio que acceda a la DB.El resolver no debería tener lógica de negocio.
>nest g s todos --no-spec (todos por el modulo,recuerda)

Bien,de momento creamos una simple coleccion y empezamos el CRUD:
@Injectable()
export class TodosService {
  private todos: Todo[] = [
    { id: 1, description: 'Piedra del alma', done: false },
    { id: 2, description: 'Piedra del espacio', done: true },
    { id: 3, description: 'Piedra del poder', done: false },
  ];

  findAll(): Todo[] {
    return this.todos;
  }
}

Inyectamos la instancia de esta clase en el resolver y accedemos a la capa de persistencia mockeada:

  constructor(private readonly todosService: TodosService) {}

  @Query(() => [Todo], {
    name: 'todos',
    description: 'encuentra todos los Todos',
  })
  findAllTodos(): Todo[] {
    return this.todosService.findAll();
  }

IMPORTANTE: si quiero tener acceso a datos como 'contar todos los Todos en done,o todos los que tengan description' tengo que crear Queries que devuelvan esto,GraphQL es solo un lenguaje de consultas a API pero mediante solo lo que esté definido previamente
Por último puedo poner un alias a la response tmb:
query {
  tareas: todos {
    description
    done  
  }
}

      VIDEO 33 REGRESAR UN TODO POR ID

Obviamente siempre vamos a querer acceder a un registro/item de una coleccion.La lógica del servicio es bastante sencilla:

  findOne(id: number): Todo | void {
    const todo = this.todos.find((todo) => todo.id === id);
    if (!todo)
      throw new NotFoundException(`Todo con el id ${id} no encontrado`);
    return todo;
  }

Y de nuevo la query es algo que ya sabemos como hacer:

  @Query(() => Todo, {
    name: 'findOneTodoByID',
    description: 'encuentra un Todo segun su ID',
  })
  findOneTodo(@Args('id', { type: () => Int }) id: number) {
    return this.todosService.findOne(id);
  }

NOTA: si buscamos por un id que no existe vemos que el error de graphql es bastante ilegible.Fernando mostrará como aplanar esa respuesta con interceptores y manipular el error 

También podemos pedir en una misma petición varias entidades.Desde luego esto tiene buena pinta,sin embargo se puede apreciar perfectamente que estamos repitiendo las peticiones que queremos recibir.Esto lo solucionaremos con un fragment:
{
  todo1:findOneTodoByID(id: 1) {
    description
    done
    id
  }
  todo2:findOneTodoByID(id: 2) {
    description
    done
    id
  }
}

      VIDEO 34 FRAGMENTS -EVITANDO CODIGO DUPLICADO

Los Fragments son unidades reutilizables para construir grupos de campos e incluirlos en las queries y asi evitar reescribir el mismo código.Me permiten escribir grupos de campos(set of fields)

La sintaxis es:
fragment NombreDelFragmento on Todo {
  elegir campos
}
Ojo,en vez del ObjectType Todo puedo elegir Query o Mutation y ser menos restrictivo,en este ejemplo sabemos que Todo nos vale,pero podemos elevar a Query el scope del fragment.
Asi pues pedimos un par de Todos usando un fragment como práctica:

query MyQuery {
  todo1:findOneTodoByID(id: 1) {
   ...customFields 
  }
  todo2:findOneTodoByID(id: 2) {
    ...customFields
  }
}

fragment customFields on Todo {
  id
  description
  done
}

Fijate que va afuera de la Query y que hay que usar el operador spread para espacir el objeto
Los fragments de GraphQL ayudan muchisimo a aplicar el principio DRY y no repetir código.
Por último puedo guardar cualquier Query en Apollo Studio y despues consultarla desde la segunda pestaña Operation collections(parecido a lo que hacemos en  Postman)

      VIDEO 35 MUTATIONS E INPUTS DE VALORES

En este video vamos a ver el nuevo tipo de dato Input y las Mutations.
Las mutations son queries usadas para modificar la data almacenada y retornar valores(basicamente es la forma de realizar POST,PUT o DELETEs) 
En cuanto al datatype Input,es la información que llamariamos body en una peticion REST,peo aplicado a una Mutation(ojo,es lo que mandaría el Front).Es decir que una Mutation tiene un Input(y dado que en GraphQL solo se expone un único endpoint supongo que siempre tendrán un Input cada Mutation al menos con el ID en el DELETE).

Pero veamos esto en código.Lo primero es crear la carpeta 'dtos' y la subcarpeta 'inputs' para la entidad/modulo actual.Despues hay que decorar una clase con el decorador @InputType y cada propiedad con @Field:

import { Field, InputType } from "@nestjs/graphql";

@InputType()
export class CreateTodoInput {
  @Field(() => String)
  description: string;
}

Ojo,esto creará un nuevo tipo de dato en GraphQL de forma similar a como hemos creado con @ObjectType el Object Type Todo(ahora será CreateTodoInput)
IMPORTANTE: si viene una propiedad que GraphQL no espera desde el cliente la va a ignorar(de forma similar a mandar de más en el body,el server va a ignorar lo extra)

Aún falta en el modulo.resolver crear la Mutation.Obviamente es con el decorador Mutation:
  
  // una mutation tmb tiene un tipo de retorno
  @Mutation(() => Todo, {
    description: 'crea un Todo',
    name: 'createTodo',
  })
  createTodo(@Args('CreateTodoInput') createTodoInput: CreateTodoInput) {
    return this.todosService.createTodo(createTodoInput);
  }

  Fijate que el nombre de @Args es como se llamará el argumento,hubiera sido mejor poner description,por ejemplo.

  En cuando al servicio creo algo asi:

  createTodo(createTodoInput: CreateTodoInput): Todo {
    const todo = new Todo();
    todo.description = createTodoInput.description;
    // fijate que interesante el Math.max(...this.colection.map(c => c.id),0)+1
    todo.id = Math.max(...this.todos.map((todo) => todo.id), 0) + 1;
    this.todos.push(todo);
    return todo;
  }

  IMPORTANTE: en este punto debemos validar los campos,ya que por ejemplo podrian mandar un string vacio.Para ello ya tenemos las librerias class-validator y class-transformer(esta ultima va a ser crucial además)
  Ojo,que tengo que instalarlas en este proyecto(yarn add class-validator class-transformer)

import { IsNotEmpty, IsString, Length } from 'class-validator';
import { Field, InputType } from '@nestjs/graphql';
import { Transform } from 'class-transformer';

@InputType()
export class CreateTodoInput {
  @Field(() => String, { description: 'descripcion de la tarea a realizar' })
  @IsString()
  @IsNotEmpty()
  @Length(1, 50)
  @Transform(({ value }) => value.trim())  <- de lujo
  description: string;
}

Recuerda que la isntalacion de esas dos librerias tmb pide esta configuracion en el main.ts:
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  );
Este tipo de validaciones es vital para el Front

        VIDEO 37 ACTUALIZAR UN TODO

IMPORTANTE: dado que ahora los campos van a ser opcionales es imprescindible poner el nullabe a true,además de las validaciones y el operador ? para la interface de TypeScript,sino peta GraphQL:

  
  @Field(() => Boolean, { description: 'tarea terminada Si/no',nullable:true })
  @IsOptional()
  @IsBoolean()
  done?: boolean;

Al final en @InputType para el Update queda asi(fijate que queda todo perfectamente definido con sus validaciones y opcionalidades):

@InputType()
export class UpdateTodoInput {
  @Field(() => Int, {
    description: 'id del todo a actualizar',
    nullable: false,
  })
  @IsInt()
  @Min(1)
  id: number;

  @Field(() => String, {
    description: 'actualizar description',
    nullable: true,
  })
  @IsString()
  @IsOptional()
  @Length(1, 50)
  @Transform(({ value }) => value.trim())
  description?: string;

  @Field(() => Boolean, {
    description: 'tarea terminada Si/no',
    nullable: true,
  })
  @IsOptional()
  @IsBoolean()
  done?: boolean;
}

La @Mutation quedaría asi:
  @Mutation(() => Todo,{
    description: 'actualiza un Todo',
    name:'updateTodo'
  })
  updateTodo(@Args('updateTodoInput') updateTodoInput: UpdateTodoInput) {
    return this.todosService.updateTodo(updateTodoInput)
  }
y el servicio simplemente actualizaría contra la capa de persistencia.
Recuerda que el tipo Input va como un JSON.Y fijate como saltan la validaciones del class-validator tmb,aparte de las de GraphQL y Typescript.Genial

      VIDEO 38 ELIMINAR UN TODO

La eliminacion es otra mutación(ya que cambiamos la data).Lo unico que no lo es es consultar data.En este punto es super sencillo implementar el borrado(fijate que no necesitamos ningun dto para el id,con que sea un Int nos vale):

 @Mutation(() => Boolean)
  removeTodo(@Args('id',{type: () => Int}) id:number) {
    return this.todosService.removeTodo(id);
  }

  Y el service:
    removeTodo(id: number) {
    this.findOne(id);
    // si pasó aqui es que tengo un todo
    this.todos = this.todos.filter((todo) => todo.id !== id);
    return true;
  }
Bien,una vez echas las operaciones básicas de un CRUD se puede ver perfectamente que faltan operaciones basicas como groupBy o sort,puesto que quizás el front quiera ver solo los todos completados, o verlos segun orden de creado,etc.De nuevo GraphQL cubre todas estas operaciones,de forma sencilla

      VIDEO 39 AGREGAR FILTROS A UNA QUERY EN GRAPHQL

Para realizar esto vamos a crear el subfolder modulo/dto/args de igual forma que ya hemos creado el modulo/dot/inputs.
Recuerda que la diferencia entre ambos es que los inputs vienen en el body de la peticion y los args son argumentos a mandar

Bien,y de igual forma que hemos creado por ejemplo un update-todo.input.ts creamos un status.args.ts para el argumento status(que tmb va a ser una clase)

Sabiendo todo esto creamos nuestro ArgsType.Fijate que necesitamos el nullable a true para GraphQL,el IsOptional para la validacion y el operador ? para Typescript:

@ArgsType()
export class StatusArgs {
  @Field(() => Boolean, { description: 'estado del todo', nullable: true })
  @IsOptional()
  status?: boolean;
}

IMPORTANTE: al usar @ArgsType no hay que poner nada en el decorador @Args de la query o mutation o dará un error,es decir,hay que usar @Args en su forma más simple:

  @Query(() => [Todo], {
    name: 'findAllTodos',
    description: 'encuentra todos los Todos',
  })
  findAllTodos(@Args() status: StatusArgs): Todo[] {
    return this.todosService.findAll(status);
  }

  Y ya solo hay que pasar un status como arg:
  fragment fields on Todo {
    description 
    done
    id
  }

  {
    completed: findAllTodos(status: true){
      ...fields
    }
  }

  En resumen,para que front pueda pedir sorts o agrupaciones se usan argumentos opcionales en el back

        VIDEO 41 AGREGAR CAMPOS CON COUNTS - AGGREGATIONS

Ya hemos visto que para hacer sorts el back las tiene que exponer.Otra feature muy usada es contar ocurrencias de una determinada circunstancia(todos los todos en done o en pending,etc).Esta feature es indispensable a la hora de hacer una paginacion(que veremos en otra sección).

  @Query(() => Int, {
    description: 'cuenta todos los todos en cualquier estado',
    name: 'totalTodos',
  })
  totalTodos(): number {
    return this.todosService.totalTodos;
  }

  @Query(() => Int, {
    description: 'cuenta todos los todos ya completados',
    name: 'completedTodos',
  })
  completedTodos():number{
    return this.todosService.completedTodos;
  }

Fijate que estamos en lo mismo,el back tiene que desarrollar toda la lógica.Esta vez con simples getters nos vale dado su sencillez:

En el service.ts:

  get totalTodos() {
    return this.todos.length;
  }

  get completedTodos() {
    return this.todos.filter((todo) => todo.done).length;
  }

  Desde luego es muy util todo esto pero se lo tiene que picar back

      VIDEO 42 OBJECT TYPES - AGGREGATIONS

Recordemos que el decorador @ObjectType nos sirve para definir un nuevo Object Type del que GraphQL sabrá que tipo de campos tiene,etc( fijate que mientras no ponga una clase con este decorador GraphQL no sabrá identificar esa entidad)
Podriamos crearnos un Object Type con todas las agregaciones anteriores

NOTA: no queda muy claro si lo anterior se llaman agregaciones,mejor no darlo por sentado aún

Con todo esto creamos un nuevo objeto que embeba todos los counts.Fijate en el uso tan interesante que podemos hacer deprecando cualquier opcion faćilmente:

@ObjectType({ description: 'Todo common aggregations' })
export class AggregationsType {

  @Field(() => Int)
  total: number;
  
  @Field(() => Int)
  pending: number;
  
  @Field(() => Int)
  completed: number;
  
  @Field(() => Int, {deprecationReason:'This get is obsolete.Please use total fiel instead' })
  totalTodosOld: number;
}

El resolver simplemente llamará a los getters que ya tenemos,etc:

 // AGGREGATIONS CON UN CUSTOM TYPE
  @Query(() => AggregationsType)
  aggregations():AggregationsType{
    return {
      total:this.todosService.totalTodos,
      completed: this.todosService.completedTodos,
      pending: this.todosService.pendingTodos,
      totalTodosOld:this.todosService.totalTodos,
    }
  }